This README explains how the ingestion works and which commands need to be issued.

REQUIREMENTS

- 'fix_groupby' branch of	https://github.com/RDCEP/EDE (Python part)
- 'ingest' 	branch of 	https://github.com/legendOfZelda/postgis (C part)

The postgis ingest branch must be compiled from the top-level directory, i.e. run 'make' inside the top-level postgis directory.
Further, the 'raster2text' executable must be present, i.e. run 'make raster2text' inside the postgis/raster/loader directory.
This is already done for you on the .58 dev-machine where these repositories are located at /home/sthaler.


INGESTING A SINGLE NETCDF BY DOING THE INDIVIDUAL STEPS MANUALLY

(1) Ingest metadata only

command:	python ingest_only_meta.py [path2netcdf]
example:	python ingest_only_meta.py /data/psims/papsim_wfdei.cru_hist_fullharm_firr_yield_whe_annual_1979_2012.nc4

This produces a file of this format:

meta_id			the autoincremented uid that resulted when inserting the metadata into the grid_meta table
number of variables
var_name, var_id	var_id is the uid of the variable in the grid_vars table
dateids			the uids of the dates that resulted when inserting the dates into the grid_dates table

This file is stored in the same directory as the input netcdf and with the same name, just with the _tableids suffix.
example:	/data/psims/papsim_wfdei.cru_hist_fullharm_firr_yield_whe_annual_1979_2012.nc4_tableids

(2) Tile up the actual data in the netcdf into a csv file ready to be read into Postgres

command:	./raster2text [path2netcdf] -o [nameofoutfile] -tids [path2tableidsfile]
example:	./raster2text /data/psims/papsim_wfdei.cru_hist_fullharm_firr_yield_whe_annual_1979_2012.nc4 -o wkb_out -tids /data/psims papsim_wfdei.cru_hist_fullharm_firr_yield_whe_annual_1979_2012.nc4_tableids
note:		For Agmerra data or generally for netcdfs with subdatasets, i.e. multiple variables, we also have to specify the variable in this command, e.g.
		./raster2text NETCDF:"/data/agmerra/clim_0004_0054.tile.nc4":pr -o wkb_out -tids /data/agmerra/clim_0004_0054.tile.nc4_tableids
		(i.e. the ‘pr’ variable here = precipitation I think)

This produces a csv file with fields (which can then be ingested with the copy from command)

—————————————————————————————————————————————————————————————————————————————————————————————
meta_id		var_id		(absolute) date (id)		raster field
300		14		1958632				0100000100000000000000E03F00000…
300		14		1958633				0100000100000000000000E03F00000…
300		14		1958634				0100000100000000000000E03F00000…
…		…		…				…
—————————————————————————————————————————————————————————————————————————————————————————————

note:		This requires the C-executable raster2text to be present, which is essentially just a modification of PostGIS’ raster2pgsql.
		You can get it from 
		repo:		https://github.com/legendOfZelda/postgis
		branch:		ingest
		directory:	raster/loader
		Normally, you’d have to check out this branch, run ‘make’ from the top-level directory, and then run ‘make raster2text’ in the raster/loader directory,
		which produces the raster2text shell script which in turn is just a wrapper for .libs/raster2text.
		However, this modified PostGIS project is already downloaded + compiled on our .58 dev-machine, so the above compilation steps don’t have to be done.

(3) Ingest the csv file produced in the previous step using Postgres’ copy from command

command:	psql -U postgres -d ede -c "copy grid_data(meta_id, var_id, date, rast) from [absolutepath2csv]”
example:	psql -U postgres -d ede -c "copy grid_data(meta_id, var_id, date, rast) from '/data/agmerra/clim_0004_0054.tile.nc4_text’”		


INGESTING A SINGLE / MULTIPLE NETCDF(S) USING SOME HELPER SCRIPTS

Helper scripts are provided to automate the above steps + run it for multiple netcdfs:

automate_psims_one		to ingest a single psims netcdf 						=> cmd: ./automate_psims_one [absolutepath2psimsnetcdf]
automate_psims_all		to ingest all psims netcdfs in the hardcoded directory /data/psims		=> cmd: ./automate_psims_all
automate_agmerra_one		to ingest a single agmerra netcdf						=> cmd: ./automate_agmerra_one [absolutepath2agmerranetcdf]
automate_agmerra_all		to ingest all agmerra netcdfs in the hardcoded directory /data/agmerra	=> cmd: ./automate_agmerra_all

Essentially, automate_psims/agmerra_one just does the above individual manual steps at once,
and automate_psims/agmerra_all calls automate_psims/agmerra_one for all netcdfs in the hardcoded directory


ADD THE ADDITIONAL DATE_ID COLUMN TO THE GRID_DATES TABLE WHICH WAS NEEDED TO BE ABLE TO RETURN NATE’S FORMAT WITH THE NULLS

The following is for the case of Agmerra data because that has many time steps so we need to automate the following steps, i.e. can’t do it by hand.
For psims I actually did the following by hand because there’s only 34 time steps.

(1)	Go into ingest directory and issue
	psql
	\o dates
	select date from grid_dates where meta_id=269; (or any id which is an agmerra file)
	\q

(2)	remove tail and head from ‘dates’ file so you only have the dates, one per line
	cat dates | ./trim > dates_out (trim away the whitespace / tab)
	python add_column.py dates_out sql_script

(3)	psql
	\i sql_script
	\q

What these steps do is they fill in the additional date_id column of the grid_dates table.
This column in turn is used to be able to return the JSON in a format that Nate wanted, i.e. with the NULLs.
